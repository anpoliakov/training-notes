1) Какие строковые классы вы знаете ? Расскажите все что знаете о каждом.
	String - при создании обьекта содержит в себе массив символов и представляет собой строку. При изменении строки - создаётся новый обьект.
	StringBuffer - это потокоориентированный класс(потокобезопасный). При изменении строки новый обьект НЕ создаётся,а изменяется текущий. Все методы ориентированны на многопоточность.
	StringBuilder - тот же самый StringBuffer но не потокоориентированный. Намного эффективный если не используется многопоточность.

2) Могу ли я унаследовать строковый тип ? Если да или нет, то почему ?
	Нет - так как все строковые классы являются final.

3) Что такое конкатенация ?
	Обьединение строк между собой.

4) Что работает бытсрее: String, StringBuilder или StringBuffer ?
	StringBuffer работает в многопоточности быстрее и вообще только его лучше использовать, быстрее всего ВНЕ многопоточности работает  StringBuilder

5) Как преобразовать строку в число ? Какое есть важное условие для этого ?
	У нас каждая обёртка содержит свою реализацию метода valueOf - которая позволяет преобразовывать строку в число. Условие в том - что тип ссылки которой присваивается значение должен быть схож с типом полученным из valueOf.	

6) Как правильно сравнить значение двух строк ?
	Через метод equals();

7) Что такое строковый пул ?
	Это место в heap памяти(?), которая хранит строки. 	

8) Как перевернуть строку ?
	Можно организовать свой метод, но зачем?
	Есть готовая реализация revers() в классе StringBuilder	

9) Чем отличается equals от == ?
	equals сравнивает по значению
	== сравнивает ссылки

10) Как можно обрезать пробелы в конце строки ?
	В классе String присутствует специальный метод trim()

11) Как заменить символ в строке ? Минимум 3 способа
	1)Метод replace(old символ,new символ) класса String - замена всех символов.
	2)Преобразовать строку в массив символов при помощи метода имя_строки.toCharArray();
	  затем заменить конкретный ситмвол [идекс символа] на нужный - и преобразовать в строку обратно через String.valueOf(массив_символов).
	3)В классе StringBuilder есть метод setCharAt(индекс_символа,"новый_символ");

12) Как можно получить часть строки ? Минимум 2 способа
	В классе String есть метод subSequence(индекс_начала_строки,индекс_конца строки)
	Можно использовать split но он тут не удобный,но можно.
	Есть метод класса String - substring(индекс_начала, индекс_конца);

13) Как можно разбить заданную строку на подстроки по конкретному разделителю ? Например по ,
Т.е. есть строка "Hello" и я хочу чтобы в итоге получилось "H,e,l,l,o"
	Можно использовать метод split(символ_по_которому_разбиваем) - вернёт массив, а из него уже достать то что нам нужно.

14) Как преобразовать любую переменню (например int) в строку ?
	Использовав тот же самы метод valueOf()

15) Как найти индекс первого и последнего элемента в строке ? 
например строка "hello world", как узнать первый индекс подстроки "llo" и как найти последний индекс символа "o" ? т.е. здесь 2 символа "o" аметьте, и мне нужен именно индекс )позиция) второго символа "o", а не первого.
	*Индекс последнего символа "o" найти очень просто - есть в классе String метод lastIndexOf("о");														
	*А первый вопрос немного не понятен, но думаю понял о чём речь - мы получаем подстроку методом subSequence() из вопроса 12 (это если знаем точные индексы), можно использовать регулярные выражения и по ним найти нужную нам подстроку, после чего передаём эту подстроку в метод indexOf() и он выдаст нам индекс начала этой подстроки.


16) Почему массив строк гораздо предпочтительней чем чем строка для того, чтобы хранить секретные данные ? *
	Что то мне думается ты иммел ввиду стандартный вопрос из интернета, типа "Почему массив символов предпочтительнее строки для хранения пароля?" 
	А возможно и нет - тогда ты имеешь ввиду это:
	String [] strmas = {"A", "F", "G"};
        String str = "AFG";
	Следовательно есть str то мы сходу можем получить наш пароль. А если он разбит посимвольно - он всёравно будет храниться в heap но каждый отдельный символ и собрать будет довольно трудно.
		

17) Почему строка является самым популярным ключеом в HashMap ? *
	String неизменный тип - следовательно как только мы создали обьект он будет таким постоянно. И hashcode доступен сразу и он не изменится.
	C - стабильность =)






Практика:

1) 
String str = "abc";
String str2 = "def";

Сложить эти строки всеми возможными способами, которые вы знаете.
Хотя бы 3 способа.

	1)str += str2;
	он же str = str + str2;
	2)str.concat(str2);
	3)StringBuilder strBir = new StringBuilder();
        stringBuilder.append(str).append(str2);

2)
Что будет выведено в консоль ?
String a = "200.5";
Double result = Double.valueOf(a);

	Double число 200.5

3) 
Что будет выведено в консоль ?

String s1 = new String("ABC");
String s2 = new String("ABC");
String s3 = "ABC";
String s4 = "ABC";

Если сравним вот так, что будет ?
s1 == s2 ? false
s3 == s4 ? true
s1 == s3 ? false(но я думал true, только потом сообразил что следом идёт s2)

Как сделать чтобы s1 == s3 было равно true ? убрать s2 или поменять местами

4) 
Уберите пробелы в конце строки. Напишите метод и psvm в IDEA

String a = "hello     ";

	String newStr = a.trim();

5) Напишите метод замены символа в строке. Замените 2-ой символ на A
String a = "Hello"; Напишите 3 разных способа.
	1)Если знаем символ то:
	String newStr = a.replace("e", "A");
	
	2)String a = "Hello";
        StringBuilder nstr = new StringBuilder(a);
        nstr.setCharAt(1,'A');

	3)Можно использовать преобразование в массив и изменение символа
	
	4)String a = "Hello";
        String newStr = a.replaceFirst("e", "A");

6)Напишите метод чтобы из строки получить часть строки "ell"

	String a = "Hello";
        String newStr = a.substring(1,4);
        System.out.printf(newStr);

7)Разделите заданную строку на подстроки по разделителю , (запятая)
String a = "Hello my dear friend";
А если я хочу чтобы в результате было вот так : [Hello, my, dear, friend]
т.е. это уже 4 разные строки которые лежат в массиве. (Не одна строка разделенная запятыми).

	Я уверен у тебя опечатка и ты имел ввиду разделить по пробелам:

	String a = "Hello my dear friend";
        String [] masStr = a.split(" ");
        for (String s : masStr) {
            System.out.printf(s + "\n");
        }

	Если это не так - значит просто заменяем все пробелы запятыми и разделяем по запятой методом split().
	
	
8)Напишите мне метод, который удаляет конкретный символ в заданной строке ?
	Вопрос в чём вырожается конкретность ? конкретный по индексу или конкретный по значению?
	1) Можем удалить по индексу:
	StringBuffer sb = new StringBuffer("asdf");
      	sb.deleteCharAt(1); 
      	System.out.println(sb);

	2)А можем написать свой метод(видел в интернете) который использует сдвиги и выдаёт строку без символа.
	
	
	



