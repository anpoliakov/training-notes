lesson_1 - 2 способа создания потоков, оба стартуют с метода start().

lesson_2 - volatile (изменяемый) указываем на переменной, в которую можем записывать и считывать одновременно.

lesson_3 - о синхронизации часть 1 (неатомарность операций (к примеру с counter++), как работать с synchronized(синхронизация на this обьекте),
           как поток main через поток.join() ждёт выполнения этого самого потока).

lesson_4 - синхронизация часть 2, работа с блоками синхронизации. Выполнение двух методов в разных потоках.

lesson_5 - пул потоков, ExecutorService который управляет потоками выполняющие определённые задачи.

lesson_6 - работа с синхронизированной очередью ArrayBlockingQueue по паттерну Производитель-Потребитель.

lesson_7 - описание равботы с использованием wait() and notify() методов.

lesson_7_1 -работа с несинхронизированной очередью с помощью
            низкоуровневой логики (с использованием wait() и notify()).

lesson_8 - описание работы с классом защёлкой CountDownLatch.

lesson_9 - работа с классом ReentrantLock (замена synchronized).

lesson_10 - работа с классом Semaphore, благодаря которому ограничесвается кол-во потоков работающие с определённым ресурсом,
            данный класс для каждого потока предоставляет "разрешения", которые после работы возращаются потоками.

lesson_11 - представлен МЕТОД для решения проблем с deadlock, при котором сохраняется порядок захвата
            локов в каждом потоке индивидуальный (возможность класса ReentrantLock).

lesson_12 - понятие об прерывании потоков, использование метода interrupted() и обработка вызова данного метода на определённом
            потоке, внутри него - при помощи метода Thread.currentThread.isInterrupted(); Остановка потока из другого потока.

lesson_13 - интерфейсы Callable and Future (функциональнные, можно использовать лябда выражения) котороые позволяют потоку вернуть
            какое то значение (обьект) в результате своей работы, далее работать с результатом в другом потоке.